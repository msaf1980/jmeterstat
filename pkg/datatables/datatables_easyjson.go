// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package datatables

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD8875cbfDecodeGithubComMsaf1980JmeterstatPkgDatatables(in *jlexer.Lexer, out *ResponceError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "draw":
			out.Draw = int(in.Int())
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD8875cbfEncodeGithubComMsaf1980JmeterstatPkgDatatables(out *jwriter.Writer, in ResponceError) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"draw\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Draw))
	}
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponceError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD8875cbfEncodeGithubComMsaf1980JmeterstatPkgDatatables(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponceError) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD8875cbfEncodeGithubComMsaf1980JmeterstatPkgDatatables(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponceError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD8875cbfDecodeGithubComMsaf1980JmeterstatPkgDatatables(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponceError) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD8875cbfDecodeGithubComMsaf1980JmeterstatPkgDatatables(l, v)
}
func easyjsonD8875cbfDecodeGithubComMsaf1980JmeterstatPkgDatatables1(in *jlexer.Lexer, out *Responce) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "draw":
			out.Draw = int(in.Int())
		case "recordsTotal":
			out.RecordsTotal = int(in.Int())
		case "recordsFiltered":
			out.RecordsFiltered = int(in.Int())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([][]string, 0, 2)
					} else {
						out.Data = [][]string{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v1 []string
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						in.Delim('[')
						if v1 == nil {
							if !in.IsDelim(']') {
								v1 = make([]string, 0, 4)
							} else {
								v1 = []string{}
							}
						} else {
							v1 = (v1)[:0]
						}
						for !in.IsDelim(']') {
							var v2 string
							v2 = string(in.String())
							v1 = append(v1, v2)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Data = append(out.Data, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD8875cbfEncodeGithubComMsaf1980JmeterstatPkgDatatables1(out *jwriter.Writer, in Responce) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"draw\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Draw))
	}
	{
		const prefix string = ",\"recordsTotal\":"
		out.RawString(prefix)
		out.Int(int(in.RecordsTotal))
	}
	{
		const prefix string = ",\"recordsFiltered\":"
		out.RawString(prefix)
		out.Int(int(in.RecordsFiltered))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Data {
				if v3 > 0 {
					out.RawByte(',')
				}
				if v4 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v5, v6 := range v4 {
						if v5 > 0 {
							out.RawByte(',')
						}
						out.String(string(v6))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Responce) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD8875cbfEncodeGithubComMsaf1980JmeterstatPkgDatatables1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Responce) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD8875cbfEncodeGithubComMsaf1980JmeterstatPkgDatatables1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Responce) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD8875cbfDecodeGithubComMsaf1980JmeterstatPkgDatatables1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Responce) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD8875cbfDecodeGithubComMsaf1980JmeterstatPkgDatatables1(l, v)
}
